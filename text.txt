https://www.youtube.com/watch?v=0oXYLzuucwE&list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q&index=1
https://github.com/academind/node-restful-api-tutorial/tree/01-basic-setup
========================================================================
https://github.com/academind/node-restful-api-tutorial/tree/09-image-upload
=====================
image api

$npm install --save multer
(for body which in in form-data-object) 

routes>products.js

const multer=require('multer')

app.use('/uploads/',express.static('uploads'))

const storage=multer.diskStorage({
    destination:function(req,file,cb){
        cb(null,'./upload/'
    },
    filename:function(req,file,cb){
        cb(null,new Date().toISOString()+file.originalName
    }
})

const fileFilter=(req,file,cb)=>{
    if(file.mimetype==='image/jpeg'||file.mimetype==='image/png'){
        cb(null,true) //save
    } 
    else{
        cb(new Error('message',false) //not save
    }
}

const upload=multer({
                     fileFilter:filter,                      
                     storage:storage,
                     limits:{fileSize:1024*1024*5   
                    }}) //relative location of project which image is store 

router.post("/",upload.single('productImage'),(req,res,next)=>{  //single image only from multer
    console.log(req.file); // from multer 
    const product=new Product({
        _id:new mongoose.Types.ObjectId(),
        name:req.body.name,
        price:req.body.price,
        productImage:req.file.path
    });
    product.save()


router.get("/",(req,res,next)=>{
    Product.find()
        .select("nam price _id productImage")
        .then()

})

===========================
in api>models>product.js    
Mongoose
==========================
const mongoose = require('mongoose')

const productSchema=mongoose.Schema({
    _id:mongoose.Schema.Types.ObjectId,
    name:{type:String,required:true},
    price:{type:String,require:true},
    productImage:{type:String,require:true}
})


==================================
How to input image in postman
==================================
localhost:5000/products
Header
 No need

Body
form-data
key name: "TV" 
price : 12





$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$44
/////////////////////////////////////////////////////////////////
=================================================================================
/*
Post 
    localhost:5000/products
Header
    Key:Content-Type, value:application/json
Body 
    raw:json(application/json)
    {"name":"TV","price":100}
//===================
res
{
    "message": "Post",
    "createdproduct": {
        "name": "TV",
        "price": 100
    }
}
*/


const express=require('express');
const app=express();
const morgan=require('morgan');
const bodyParser=require('body-parser');
const cors = require('cors');

//Bodyparser Middleware
app.use(express.json());
app.use(morgan('dev'));
//new node version no need for body-parser
//app.use(bodyParser.urlencoded({extended:false}));
//app.use(bodyParser.json());
app.use(cors());
/*
No need to use cross server
app.use((res,req,next)=>{
    res.header('Access-Control-Allow-Origin','*');
    res.header('Access-Control-Allow-Headers','Origin,X-Requested-With,Content-Type,Accept,Authorization');
    if(req.method==='OPTIONS'){
        res.header('Access-Control-Allow-Methods','PUT,POST,PATCH,DELETE,GET');
        return res.status(200).json({});
    }
    next();
})
*/

app.use('/products',require('./api/routes/products'));
app.use('/orders', require('./api/routes/orders'));

app.use((req,res,next)=>{
    const error=new Error('Not Found');
    error.status=404;
    next(error);//error={status:404,message:'Not Found'}
})

app.use((error,req,res,next)=>{
    res.status(error.status||500);
    res.json({er:{message:error.message}})
    /*
    {
    "er": {
                "message": "Not Found"
             }
    }
    */
})

//Serve static assets if in production
if(process.env.NODE_ENV==='production'){
    //Set static folder
    app.use(express.static('client/build'));
    app.get('*',(req,res)=>{
      res.sendFile(path.resolve(__dirname,'client','build','index.html'));
    })
  }
  
const port=process.env.PORT || 5000;
  

app.listen(port,()=>console.log(`Server on port ${port}`));

=================================================